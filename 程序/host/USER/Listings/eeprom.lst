C51 COMPILER V9.56.0.0   EEPROM                                                            03/25/2020 14:58:05 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN ..\OBJ\eeprom.obj
COMPILER INVOKED BY: D:\Program_File\Keil_v5\C51\BIN\C51.EXE ..\HARDWARE\EEPROM\eeprom.c OPTIMIZE(8,SPEED) BROWSE INCDIR
                    -(..\HARDWARE;..\SYSTEM;..\HARDWARE\DISPLAY;..\HARDWARE\USART;..\HARDWARE\TIM;..\HARDWARE\KEY;..\HARDWARE\EEPROM) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\eeprom.lst) OBJECT(..\OBJ\eeprom.obj)

line level    source

   1          /*------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ---------------------------------------------*/
   3          /* --- STC89-90xx Series MCU ISP/IAP/EEPROM Demo -------------------*/
   4          /* --- Mobile: (86)13922805190 -------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ---------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966----------------------*/
   7          /* --- Web: www.STCMCU.com -----------------------------------------*/
   8          /* --- Web: www.GXWMCU.com -----------------------------------------*/
   9          /* If you want to use the program or the program referenced in the  */
  10          /* article, please specify in which data and procedures from STC    */
  11          /*------------------------------------------------------------------*/
  12          
  13          //#include "reg51.h"
  14          //#include "intrins.h"
  15          
  16          #include "eeprom.h"
  17          
  18          
  19          
  20          /*----------------------------
  21          Software delay function
  22          ----------------------------*/
  23          //void Delay(BYTE n)
  24          //{
  25          //    WORD x;
  26          
  27          //    while (n--)
  28          //    {
  29          //        x = 0;
  30          //        while (++x);
  31          //    }
  32          //}
  33          
  34          /*----------------------------
  35          Disable ISP/IAP/EEPROM function
  36          Make MCU in a safe state
  37          ----------------------------*/
  38          void IapIdle()
  39          {
  40   1          IAP_CONTR = 0;                  //Close IAP function
  41   1          IAP_CMD = 0;                    //Clear command to standby
  42   1          IAP_TRIG = 0;                   //Clear trigger register
  43   1          IAP_ADDRH = 0x80;               //Data ptr point to non-EEPROM area
  44   1          IAP_ADDRL = 0;                  //Clear IAP address to prevent misuse
  45   1      }
  46          
  47          /*----------------------------
  48          Read one byte from ISP/IAP/EEPROM area
  49          Input: addr (ISP/IAP/EEPROM address)
  50          Output:Flash data
  51          ----------------------------*/
  52          BYTE IapReadByte(WORD addr)
  53          {
C51 COMPILER V9.56.0.0   EEPROM                                                            03/25/2020 14:58:05 PAGE 2   

  54   1          BYTE dat;                       //Data buffer
  55   1      
  56   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  57   1          IAP_CMD = CMD_READ;             //Set ISP/IAP/EEPROM READ command
  58   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
  59   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
  60   1          IAP_TRIG = 0x46;                //Send trigger command1 (0x46)
  61   1          IAP_TRIG = 0xb9;                //Send trigger command2 (0xb9)
  62   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
  63   1          dat = IAP_DATA;                 //Read ISP/IAP/EEPROM data
  64   1          IapIdle();                      //Close ISP/IAP/EEPROM function
  65   1      
  66   1          return dat;                     //Return Flash data
  67   1      }
  68          
  69          /*----------------------------
  70          Program one byte to ISP/IAP/EEPROM area
  71          Input: addr (ISP/IAP/EEPROM address)
  72                 dat (ISP/IAP/EEPROM data)
  73          Output:-
  74          ----------------------------*/
  75          void IapProgramByte(WORD addr, BYTE dat)
  76          {
  77   1          IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  78   1          IAP_CMD = CMD_PROGRAM;          //Set ISP/IAP/EEPROM PROGRAM command
  79   1          IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
  80   1          IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
  81   1          IAP_DATA = dat;                 //Write ISP/IAP/EEPROM data
  82   1          IAP_TRIG = 0x46;                //Send trigger command1 (0x46)
  83   1          IAP_TRIG = 0xb9;                //Send trigger command2 (0xb9)
  84   1          _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
  85   1          IapIdle();
  86   1      }
  87          
  88          /*----------------------------
  89          Erase one sector area
  90          Input: addr (ISP/IAP/EEPROM address)
  91          Output:-
  92          ----------------------------*/
  93          //void IapEraseSector(WORD addr)
  94          //{
  95          //    IAP_CONTR = ENABLE_IAP;         //Open IAP function, and set wait time
  96          //    IAP_CMD = CMD_ERASE;            //Set ISP/IAP/EEPROM ERASE command
  97          //    IAP_ADDRL = addr;               //Set ISP/IAP/EEPROM address low
  98          //    IAP_ADDRH = addr >> 8;          //Set ISP/IAP/EEPROM address high
  99          //    IAP_TRIG = 0x46;                //Send trigger command1 (0x46)
 100          //    IAP_TRIG = 0xb9;                //Send trigger command2 (0xb9)
 101          //    _nop_();                        //MCU will hold here until ISP/IAP/EEPROM operation complete
 102          //    IapIdle();
 103          //}
 104          
 105          
 106          /*******************************************************************************
 107          * 函数名         : WriteVartoRom
 108          * 功能                         : 写入var_tmp中数据到ROM
 109          * 输入                         ：要写入的数组的地址和大小
 110          * 输出                         : 无
 111          *******************************************************************************/
 112          void WriteVartoRom(BYTE* arr,uint SIZE)
 113          {
 114   1              int i;
 115   1              for(i=0;i<SIZE;i++)
C51 COMPILER V9.56.0.0   EEPROM                                                            03/25/2020 14:58:05 PAGE 3   

 116   1              {
 117   2                      IapProgramByte(IAP_ADDRESS+i, (BYTE)arr[i]);
 118   2              }
 119   1      }
 120          
 121          /*******************************************************************************
 122          * 函数名         : ReadRomToVar
 123          * 功能                         : 读取ROM中数据到var_tmp
 124          * 输入                         ：要读取到的数组的地址和大小
 125          * 输出                         : 无
 126          *******************************************************************************/
 127          void ReadRomToVar(BYTE* arr,uint SIZE)
 128          {
 129   1              int i;
 130   1              for(i=0;i<SIZE;i++)
 131   1              {
 132   2                      arr[i]=IapReadByte(IAP_ADDRESS+i);
 133   2              }
 134   1      }
 135          
 136          /*******************************************************************************
 137          * 函数名         : UpVarTmp
 138          * 功能                         : 更新var_tmp缓存数组
 139          * 输入                         ：mode 1 Date to var_tmp  0 var_tmp to Date
 140          * 输出                         : 无
 141          *******************************************************************************/
 142          void UpVarTmp(int mode)
 143          {
 144   1              if(mode==1)                             //更新数据到var_tmp数组中
 145   1              {
 146   2                      var_tmp[0]=time_backup;
 147   2                      var_tmp[1]=time_com1;
 148   2                      var_tmp[2]=time_com2;
 149   2                      var_tmp[3]=time_com3;
 150   2              }
 151   1              else                                            //更新var_tmp数组中的数据到变量中
 152   1              {
 153   2                      time_backup=var_tmp[0];
 154   2                      time_com1=var_tmp[1];
 155   2                      time_com2=var_tmp[2];
 156   2                      time_com3=var_tmp[3];
 157   2              }
 158   1      }
 159          
 160          /*******************************************************************************
 161          * 函数名         : ClearVarTmp
 162          * 功能                         : 清空var_tmp缓存数组
 163          * 输入                         ：var_tmp数组大小
 164          * 输出                         : 无
 165          *******************************************************************************/
 166          void ClearVarTmp(uint SIZE)
 167          {
 168   1              int i;
 169   1              for(i=0;i<SIZE;i++)
 170   1              {
 171   2                      var_tmp[i]=0;
 172   2              }
 173   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    245    ----
C51 COMPILER V9.56.0.0   EEPROM                                                            03/25/2020 14:58:05 PAGE 4   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
